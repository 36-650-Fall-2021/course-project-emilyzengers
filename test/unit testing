import pytest

from q1_src import *

def test_most_improvement():
    assert most_improvement(10) is not None, "Most improvement dataframe should not be empty"
    assert most_improvement(10)[1] == [233727, 'Connor McLennan', 51, 67, 16], "Second most improved player should be Connor McLennan"
    assert len(most_improvement(5)) == 5, "There should be 5 players"
    assert most_improvement(5)[1] != [193512, 'Milan Heča', 58, 73, 15], "Second most improved player should not be Milan Heča"
    assert most_improvement('char') == 'Must input integer', "Should return error message that input must be an integer"
    assert most_improvement(-1) == "The number of players to display must be a postive integer", "Should return error message that input must be greater than 0"
    assert most_improvement(0) == "The number of players to display must be a postive integer", "Should return error message that input must be greater than 0"

from q2_src import *

def test_num_clubs():
    assert num_clubs(10) is not None, "Number of clubs should not be empty"
    assert len(num_clubs(5)) == 5, "Length of list should be 5"
    assert num_clubs(10)[0] == (18, '1. FC Kaiserslautern'), "Club with most players with contracts ending in 2021 should be 1. FC Kaiserslautern"
    assert num_clubs(10)[0] != (18, 'FC Ingolstadt 04'), "Club with most players with contracts ending in 2021 should not be FC Ingolstadt 04"
    assert num_clubs(5)[1][0] > num_clubs(5)[2][0], "FC Ingolstadt 04 should have more players with contracts ending in 2021 than FC Girondins de Bordeaux does"
    assert num_clubs('char') == 'Must input integer', "Should return error message that input must be an integer"
    assert num_clubs(-1) == "The number of clubs to display must be a postive integer", "Should return error message that input must be a positive integer"
    assert num_clubs(0) == "The number of clubs to display must be a postive integer", "Should return error message that input must be a positive integer"
    
from q3_src import *

def test_num_clubs_lim():
    assert num_clubs_lim(10) is not None, "Number of clubs should not be empty"
    assert num_clubs_lim(10)[0] == (33, 'Parma'), "Second element in list should be (33,'Parma')"
    assert len(num_clubs_lim(5)) == 5, "There should be 5 clubs"
    assert num_clubs_lim(5)[1] != (33, 'Parma'), "Second element in list should not be (33, 'Parma'))"
    assert num_clubs_lim(5)[1][0] == num_clubs(5)[2][0], "Parma and Athletic Club de Bilbao should have the same number of players"
    assert num_clubs_lim('char') == 'Must input integer', "Should return error message that input must be an integer"
    assert num_clubs_lim(3) is 'The number of clubs to display should at least be 5', "Should return an error message where z must be greater than equal to 5"
    assert num_clubs_lim(-1) == "The number of clubs to display must be a postive integer", "Should return an error message that input should be a positive integer"
    assert num_clubs_lim(0) == "The number of clubs to display must be a postive integer", "Should return an error message that input must be a positive integer"
    
from q4_src import *

def test_team_position():
    assert team_position_mode() is not None, "Should not be empty and return positions"
    assert len(team_position_mode()) == 1, "There should be one team position that is the most popular"
    assert team_position_mode()[0][0] == 'GK', "The most popular team position should be GK, or goalkeeper"
    assert team_position_mode()[0] == ('GK', 662), "The most popular team position should be GK, with 662 players with that position."

def test_nation_position():
    assert nation_position_mode() is not None, "Should not be empty and return positions"
    assert len(nation_position_mode()) == 3, "There should be 3 most popular nation positions"
    assert nation_position_mode()[0][0] == 'LCB', "The most popular team position should be GK, or goalkeeper"
    assert nation_position_mode()[0] == ('LCB', 49), "The most popular team position should be GK, with 662 players with that position."
    
from q5_src import *

def test_nationality():
    assert nationality_mode() is not None, "Should return a nationality and not be empty"
    assert nationality_mode()[0] == ('England', 1667), "The most popular nationality should be English"
    assert len(num_clubs_lim()) == 1, "There should only be one most popular nationality"
    assert nationality_mode()[0][0] == 'England', "Should return England"
